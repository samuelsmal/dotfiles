#! /bin/bash

# The setup, install, retrieving and applying config script. Called Freyr after the Norse god, who
# 'is a widely attested god associated with sacral kingship, virility and prosperity, with sunshine
# and fair weather, and pictured as a phallic fertility god in Norse mythology. Freyr is said to
# "bestow peace and pleasure on mortals"' (From wikipedia)
# And this script brings me pease, maybe not pleasure. A bit prosperity.

check_and_remove_file () {
  [[ -f $1 ]] && rm -f $1
}

check_and_remove_dir () {
  [[ -d $1 ]] && rm -f $1
}

setup_epfl_wlan () {
  bash ./epfl/wlan/_setup.sh
}

setup_ssh () {
  bash ./_ssh/_setup.sh
}

setup_tir () {
  echo "Setting up tir ..."
  bash ./_hosts/tir/_setup.sh
  echo "Setting up tir ... done!"
}

update_system () {
  echo "Updating system ..."
  sudo dnf -y update
  echo "Updating system ... done!"
}

migrate (){
  version_lock_file_name="./.version_lock"
  newest_migration=3
  version_lock=0
  if [ -f "$version_lock_file_name" ]; then
    version_lock=$(<"$version_lock_file_name")
  fi
  echo "version_lock: $version_lock"

  for step in $(seq $((version_lock + 1)) $newest_migration); do
    case "$step" in
      "1")
        echo "doing step 0->1"
        sudo dnf remove snapd tmuxinator
        install_flatpaks
        ;;
      "2")
        echo "doing step 1->2"
        install_nordvpn
        ;;
      "3")
        echo "doing step 2->3"
        fix_headphone_white_noise
        add_autostart_applications
        ;;
    esac

    echo "done with step $step"
    echo "$step" > "$version_lock_file_name"
  done
}

setup_android_dev () {
  sudo dnf install -y android-tools
}

fix_headphone_white_noise () {
  # this is a fix for the stupid white noise using my dell xps laptop
  # I got the answer from https://unix.stackexchange.com/questions/336790/how-to-disable-white-noise-with-headphones-in-dell-xps
  echo "fixing headphone white noise ..."
  echo "  enabling acpid service"
  sudo systemctl enable acpid.service

  echo "  copying scripts"
  sudo cp ./_setup/headphone_white_noise_fix/headphone-plug /etc/acpi/events/
  sudo cp ./_setup/headphone_white_noise_fix/cancel-white-noise.sh /etc/acpi/actions/
  echo "fixing headphone white noise ... done"
}

install_ruby () {
  echo "Installing rvm & ruby ..."
  gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
  curl -sSL https://get.rvm.io | bash -s -- -ignore-dotfiles
  rvm install 2.6
  rvm use 2.6
  gem install tmuxinator
  echo "Installing rvm & ruby ... done"
}

install_node () {
  echo "Installing node"
  echo "Installing node: installing nvm (maybe check version, last update 2019-08-02)"
  NVM_DIR="$HOME/.local/nvm"
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | NVM_DIR=$NVM_DIR bash && \
  echo "Installing node: installing node" && \
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && \
  nvm install node

  echo "Installing node: installing yarn"
  curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo
  sudo dnf install yarn
  echo "Installing node: done"
}

install_games () {
  echo "installing games"
  flatpak install flathub com.play0ad.zeroad
  echo "installing games: done"
}


install_flatpaks () {
  echo "Installing flatpaks..."
  sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
  flatpak install -y flathub discord
  flatpak install -y flathub com.spotify.Client
  flatpak install -y flathub org.signal.Signal
  flatpak install -y flathub org.telegram.desktop
  flatpak install -y flathub com.mattermost.Desktop
  echo "Installing flatpaks ... done"
}

install_nordvpn () {
  echo "Installing nordvpn ..."
  nordvpn_version="1.0.0-1"
  sudo wget -qnc "https://repo.nordvpn.com/yum/nordvpn/centos/noarch/Packages/n/nordvpn-release-$nordvpn_version.noarch.rpm" -P /tmp/
  sudo dnf install -y /tmp/nordvpn-release-$nordvpn_version.noarch.rpm
  sudo dnf install -y nordvpn
  echo "Installing nordvpn ... done"
}

install_packages () {
  echo "Installing packages ..."
  # wmctrl for launching and switching to applications, used by user defined (you, the reader) gnome-shortcuts

  sudo dnf copr enable -y daniruiz/flat-remix
  sudo dnf copr enable -y dgoerger/workstation
  sudo dnf copr enable -y user501254/Arc

  sudo dnf install -y dnf-plugins-core \
    llvm lldb clang \
    vim gvim the_silver_searcher git zsh powerline \
    tmux tmux-powerline \
    keepassx xclip \
    curl wget \
    zotero calibre \
    wmctrl \
    gstreamer-plugins-base gstreamer1-plugins-base gstreamer-plugins-bad gstreamer-plugins-ugly \
    gstreamer1-plugins-ugly gstreamer-plugins-good-extras gstreamer1-plugins-good-extras \
    gstreamer1-plugins-bad-freeworld ffmpeg gstreamer-ffmpeg \
    nodejs npm \
    vlc \
    thunderbird \
    stow \
    mozilla-fira-mono-fonts flat-remix arc-theme levien-inconsolata-fonts

  echo "Installing gnome specific stuff ..."
  sudo dnf install -y gnome-shell-extension-pomodoro \
                      gnome-shell-extension-media-player-indicator \
                      gnome-shell-extension-do-not-disturb-button \
                      gnome-shell-extension-topicons-plus \
                      gnome-shell-extension-freon
  gnome-shell-extension-installer 277 # impatience
  echo "Installing gnome specific stuff ... done"

  sudo dnf -y groupinstall "C Development Tools and Libraries"
  sudo dnf -y groupinstall "Development Tools"

  install_flatpaks
  install_node
  install_nordvpn
  install_ruby

  echo "Installing packages ... done!"
}

link_dotfiles () {
  echo "Linking dotfiles ..."
  stow -v git i3 ideavim js jupyter python spark stow tmux vim zsh bin
  echo "Linking dotfiles ... done"
}

setup_vim () {
  echo "Setting up vim ..."
  mkdir -p ~/.cache/dein
  curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh > /tmp/dein_installer.sh
  sh /tmp/dein_installer.sh ~/.cache/dein
  rm /tmp/dein_installer.sh
  gvim -v +"call dein#install()" +qall
  echo "Setting up vim ... done"
}

add_autostart_applications () {
  local autostart_dir=$HOME/.config/autostart/
  mkdir -p $autostart_dir
  echo "adding load ssh keys to autostart"
  [[ -e $ssh_desktop ]] && rm $ssh_desktop
  cp $PWD/_setup/load-ssh-keys.desktop $autostart_dir
}

install_conda () {
  echo "installing conda ..."
  # conda installation
  check_and_remove_file "/tmp/miniconda.sh"
  wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh
  bash /tmp/miniconda.sh -b -p $HOME/.local/opt/miniconda3
  rm /tmp/miniconda.sh
  echo "installing conda ... done"
}

apply_system_settings () {
  echo "applying system settings ..."
  bash _system-settings/_setup.sh
  echo "applying system settings ... done"
}

name_system () {
  # Naming the system
  echo "I hearby declare this computer working! Awake ..."
  sudo hostnamectl set-hostname --static $1
}

prepare_thunderbird_settings () {
  echo "Preparing thunderbird settings. This will copy the settings from ~/.thunderbird"
  cp ~/.thunderbird/profiles.ini ./_thunderbird/profiles.ini
  egrep 'user_pref\("mail\.(account(manager)?|identity|(smtp)?servers?)[."]' \
    < ~/.thunderbird/au07n7ne.default/prefs.js >> ./_thunderbird/prefs.js \
    && vim ./_thunderbird/prefs.js
}

copy_thunderbird_settings () {
  echo "Trying to create the correct thunderbird settings ..."
  [[ -f ~/.thunderbird/profiles.ini ]] && cp ~/.thunderbird/profiles.ini ~/.thunderbird/profiles_bak.ini
  mkdir -p ~/.thunderbird/au07n7ne.default/
  cp ./_thunderbird/profiles.ini ~/.thunderbird/
  if [ -f ~/.thunderbird/au07n7ne.default/prefs.js ]; then
    cp ~/.thunderbird/au07n7ne.default/prefs.js ~/.thunderbird/au07n7ne.default/prefs_bak.js
    egrep -v 'user_pref\("mail\.(account(manager)?|identity|(smtp)?servers?)[."]' \
      < ~/.thunderbird/au07n7ne.default/prefs.js >> ~/.thunderbird/au07n7ne.default/prefs_new.js \
      && cat ./_thunderbird/prefs.js >> ~/.thunderbird/au07n7ne.default/prefs_new.js \
      && mv ~/.thunderbird/au07n7ne.default/prefs_new.js ~/.thunderbird/au07n7ne.default/prefs.js
  else
    echo "No prefs found, no clue how that's going to turn out..."
    cp ./_thunderbird/prefs.js ~/.thunderbird/au07n7ne.default/prefs.js
  fi
  echo "Trying to create the correct thunderbird settings ... done"
}

apply_firefox_user_chrome () {
  echo "appyling firefox settings ..."
  config_dir=$(ls $HOME/.mozilla/firefox | grep 'default')
  config_dir="~/.mozilla/firefox/$config_dir/chrome"
  mkdir -p $config_dir
  cp ./_setup/userChrome.css $config_dir
  echo "appyling firefox settings ... done"
}

prepare () {
  echo "Preparing..."
  prepare_thunderbird_settings
  echo "Preparing... done"
}

_setup () {
  echo "Starting setup ..."
  update_system
  install_packages
  link_dotfiles
  setup_vim
  add_autostart_applications
  install_conda
  apply_system_settings
  copy_thunderbird_settings
  apply_firefox_user_chrome
  setup_ssh
  echo "Starting setup ... done"
}

help_message () {
  echo "freyr - bash script to set up the system"
  echo "Usage:"
  echo "    ./freyr --help                        Display this message"
  echo "    ./freyr -u --update                   Update system"
  echo "    ./freyr --hostname <new hostname>     Setup system (links dotfiles, install packages, ...)"
}

# got this setup from:
# - https://gist.github.com/magnetikonline/22c1eb412daa350eeceee76c97519da8
# - https://gist.github.com/cosimo/3760587

opts=$(getopt \
  -o hums \
  --long help,update,setup,hostname:,migrate,dev \
  --name "${0##*/}" \
  -- "$@"
)

eval set -- "$opts"

setup_system=false
new_host_name=""

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h | --help )
      help_message
      shift
      exit 0
      ;;
    -u | --update )
      update_system
      shift
      ;;
    -m | --migrate )
      migrate
      shift
      ;;
    --hostname )
      new_host_name=$2
      shift 2
      ;;
    -s | --setup )
      setup_system=true
      shift
      ;;
    --dev )
      add_autostart_applications
      shift
      ;;
    -- )
      shift
      break
      ;;
    * )
      echo "huh? no clue what to do with that: $1"
      help_message
      shift
      exit 0
      ;;
  esac
done

if [ "$setup_system" = true ]; then
  _setup

  if [ ! "x$new_host_name" = "x" ]; then
    name_system $new_host_name
  fi
fi

exit 1
